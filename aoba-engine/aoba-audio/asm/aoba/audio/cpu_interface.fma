module Aoba::Audio

  if ENABLE_SA1

    ;; Sends and event to the SNES
    ;; @param X routine address
    ;; @param Y event
    def _send_event_and_wait
      ;; Sends the event to the SNES
      PHX
      CPU.set A: 16
      LDA   sa1_command_end
      AND   #(MAX_SA1_SNES_COMMANDS * 2).bitmask
      TAX
      PLA
      STA   sa1_command_routine, X
      TYA
      STA   sa1_command_event, X
      INX
      INX
      STX   sa1_command_end
      CPU.set A: 8
      
      ;; Waits for the event to be finished
      TYX
      X.is_a! Audio::Event::Base

    _loop:
      LDA   X[:event_id]
      CMP   #$FF
      BEQ   _event_finished
      PHX
      LDY   #1
      JSL   Thread.delay_long
      PLX
      BRA   _loop

    _event_finished:
      RTS
    end

  end

  ;; Generates the audi event for the SA1/SNES adapter
  macro _make_sa1_audio_event(&block)
    _callback = create_sa1_ram_routine bank: AUDIO_ROM_BANK do
      A.pretend_size 8
      X.pretend_size 16
      block.call
      RTS
    end

    LDX   #_callback.address + System::RoutineRamSnes - 1
    JMP   _send_event_and_wait
  end

  ;; Generates an audio event
  macro make_audio_event(&block)
    func = Function.new "audio_event_callback" do
      A.pretend_size 8
      X.pretend_size 16
      if ENABLE_SA1
        _make_sa1_audio_event &block
      else
        block.call
      end
      RTS
    end
    func.override_located_at bank: AUDIO_ROM_BANK
    return func
  end

end
