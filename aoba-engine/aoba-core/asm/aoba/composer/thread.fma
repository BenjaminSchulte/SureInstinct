module Aoba::Composer
  TimerTest = SwitchEvent.new

  ;; The event handler
  ;; @ignore-thread-safety
  def event_handler
    PHX

    ;; Tests how to handle the event
    CPU.set A: 8
    X.is_a! Event::Base
    LDA   X[:event_bitmask]
    ASL   A
    BMI   _system_event
    LDA   X[:sender_thread_id]
    BMI   _test_special_event

  _invoke_custom_event:
    TXY
    LDA   X[:event_id]

    CPU.set A: 16
    AND   dp(x00FF)
    DEC   A
    Debug.test_A_less_than Event::List.max_event_id, "Composer Event ID out of range"
    ASL   A
    TAX
    JSR   Event::List.routines.indirect, X
    PLX
    RTS

    ;; --

  _system_event:
    Debug.warn "+++ Thread {byte(long(add(word(long(add(D,$FE),#{FIXED_RAM_BANK})),2),#{VARIABLE_RAM_BANK}))}: SKIP SYSTEM EVENT {X}"
    PLX
    CPU.set A: 16
    RTS

    ;; --

  _test_special_event:
    INC   A
    BZE   _invoke_timer_event

    fatal_error "Unexpected event in Composer handler"

  _invoke_timer_event:
    X.is_a! Thread::Timer::TimerEvent
    CPU.set A: 16
    LDA   X[:timer]
    TimerTest.build

    PLX
  end

  ;; Thread entry point
  ;; @ignore-thread-safety
  def main
    CPU.set A: 8
    LDA   Memory::active_thread_id
    STA   thread_id
    Debug.profile_introduce 9
    Debug.info "Thread {A}: Composer Thread"
    CPU.set A: 16
    CLI

    JSR   initialize_ram
    JSR   Hdma.initialize_ram

  _loop:
    LDA   #$FE
    JSL   Thread.wait_for_event_icb_long
    event_handler
    JSL   Thread::Event.free_icb_long
    BRA   _loop
  end
end

module Aoba
  ComposerThread = Thread.new "Composer" do
    locate_at bank: COMPOSER_ROM_BANK
    priority COMPOSER_PRIORITY

    execute do
      Composer::main
    end
  end
end
