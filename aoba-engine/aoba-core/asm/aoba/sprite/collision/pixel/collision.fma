module Aoba::Sprite::Collision::Pixel

  class CollisionBuilder
    macro initialize(collision)
      @collision = collision
    end

    macro use(other)
      other.include_to_sprite_collision @collision
    end
    
    macro use_hit_events(hit_events)
      @collision.hit_events = hit_events
    end

    macro sprite_collision_mask(mask)
      @collision.sprite_mask = mask
    end

    macro sprite_offset(x, y)
      @collision.sprite_offset_x = x
      @collision.sprite_offset_y = y
    end

    macro sprite_size(x, y)
      @collision.sprite_size_x = x
      @collision.sprite_size_y = y
    end

    macro collision_data(data)
      @collision.collision_data = data
    end

    macro add_layer(layer, tile_data=nil, tile_data_format=:uint8)
      @collision.layer = layer
      @collision.layer_data[layer] = {tile_data: tile_data, tile_data_format: tile_data_format}
    end
  end

  class Collision < Base
    macro initialize
      super

      @SharedTempRAM = MemoryScope.new("SharedTempRAM", in: @TempRAM, shared: true)

      @sprite_offset_x = 0
      @sprite_offset_y = 0
      @sprite_size_x = 16
      @sprite_size_y = 16
      @sprite_mask = nil
      @collision_data = nil

      @hit_events = nil

      @layer = nil
      @layer_data = {}
    end

    macro finalize
      @_test = TestCollision.new self
      
      super
    end
 
    macro self.create(&block)
      collision = Collision.new
      builder = CollisionBuilder.new(collision)
      block.call with_context builder
      collision.finalize
      return collision
    end

    macro read_relative_tile_data
      JSR   @_test.read_relative_tile_data
    end

    macro test_collision
      JSR   @_test.process_collision
    end

    macro cache_collision
      ;Debug.BRK
;;;      JSR   @_detect.cache_collision
    end
  end

end
