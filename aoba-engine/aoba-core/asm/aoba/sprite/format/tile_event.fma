module Aoba::Sprite::TileEvent

  class Action < BaseActionCollectionAction
    macro initialize(id)
      super id
    end
  end

  macro create(id, &block)
    action = Action.new(id)
    result = _create_collection_action action, "tile_event_#{id}", SPRITE_ROM_BANK do
      Y.is_a! Instance
      block.call
    end
    return result
  end

  _nop = create :nop do
  end
  


  class CollectionBuilder < BaseActionCollectionBuilder
    macro initialize(instance)
      super instance, _nop
    end
  end

  class Collection < BaseActionCollection
    macro initialize
      super "tile_event", SPRITE_ROM_BANK
    end
    
    macro include_to_sprite_thread(thread)
      thread.move_events = self  
    end

    macro self.create(&block)
      collection = Collection.new
      builder = CollectionBuilder.new(collection)
      block.call with_context builder
      collection.finalize
      return collection
    end
  end



  class ConfigurationBuilder
    macro initialize(config)
      @config = config
    end

    macro use_enter_events(collection)
      @config.enter_events = collection
    end

    macro use_leave_events(collection)
      @config.leave_events = collection
    end

    macro prevent_diagonal_crossing(tile_format)
      on :test_recursive_call do
        Aoba::Sprite::Action::Move::TileEvent._prevent_diagonal_crossing tile_format
      end
    end

    macro read_tile_data_from_collision(collision)
      on :read_tile_data do
        collision.read_current_tile_data
        LDY   dp(collision.collision_index)
        STA   dp(config.tile_data)
        STY   dp(config.tile_index)
      end
    end

    macro identify_enter_events(test_mask, test_matches, mask, shift, add)
      _self = self
      on :after_change16 do
        Aoba::Sprite::Action::Move::TileEvent.process_enter_event _self.config, test_mask, test_matches, mask, shift, add
      end
    end

    macro identify_leave_events(test_mask, test_matches, mask, shift, add)
      _self = self
      on :after_change16 do
        Aoba::Sprite::Action::Move::TileEvent.process_leave_event _self.config, test_mask, test_matches, mask, shift, add
      end
    end

    macro identify_move_events(test_mask, test_matches, mask, shift, add)
      _self = self
      on :change8 do
        Aoba::Sprite::Action::Move::TileEvent.store_move_event _self.config, test_mask, test_matches, mask, shift, add
      end
    end

    macro on(id, &block)
      @config.event.on id, &block
    end
  end

  class Configuration < EngineObject
    macro initialize
      super

      @TempRAM = MemoryScope.new("tile_event_ram", in: Aoba::Sprite::Action::Move::SharedTempRAM)
      @SharedTempRAM = MemoryScope.new("shared_tile_event_ram", in: @TempRAM, shared: true)
      @tile_data = MemoryVariable.new("tile_data", as: :uint16, in: @TempRAM)
      @tile_index = MemoryVariable.new("tile_index", as: :uint16, in: @TempRAM)

      @event = Aoba::Event::Emitter.new
      @enter_events = nil
      @leave_events = nil
    end

    macro include_to_sprite_thread(thread)
      thread.tile_events = self
    end

    macro _test_mask(mask, matches)
      AND   #mask
      CMP   #matches
      BNE   _skip
      LDA   dp(@tile_data)
      yield
    _skip:
    end

    macro self.create(&block)
      config = Configuration.new
      builder = ConfigurationBuilder.new(config)
      block.call with_context builder
      return config
    end
  end

end