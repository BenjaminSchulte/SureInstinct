module Game::Level::SpriteGenerator

  locate_at bank: Aoba::LEVEL_ROM_BANK

  scope :TempRAM, in: nil, for: ::SNES::MemoryMap::RAM
  declare :_calc0, as: :uint32, in: TempRAM
  declare :current_layer, as: :uint16, in: TempRAM
  declare :current_tile_address, as: :uint16, in: TempRAM
  declare :current_row, as: :uint16, in: TempRAM
  declare :current_x, as: :uint8, in: TempRAM
  declare :current_y, as: :uint8, in: TempRAM
  declare :remaining_width, as: :uint8, in: TempRAM
  declare :remaining_height, as: :uint8, in: TempRAM

  def generate_map_sprite
    STX   dp(_calc0)
    STY   dp(_calc0) + 2

    ;; Allocates the configuration RAM
    LDA   Aoba::Sprite.thread_id
    LDX   #Aoba::Sprite::Event::CreateSprite::EventConfig.size
    SEI
    JSL   Aoba::Memory.allocate_miniblock_long
    CLI
    X.is_a! Aoba::Sprite::Event::CreateSprite::EventConfig

    LDA   dp(current_x)
    AND   #$FF
    16.multiplicated_register_A
    ORA   #8
    STA   X[:x]
    LDA   dp(current_y)
    AND   #$FF
    16.multiplicated_register_A
    ORA   #8
    STA   X[:y]
    LDA   #Animation::Animation::stand
    STA   X[:animation]
    LDA   #Animation::Direction::down | $3100
    STA   X[:direction]
    LDA   dp(_calc0)
    STA   X[:sprite_id]
    LDA   dp(_calc0) + 2
    STA   X[:palette_group_address]
    JSL   Aoba::Sprite::Api.create_sprite_icb_long
    X.is_a! Aoba::Sprite::Instance

    LDA   dp(current_layer)
    STA   X[:sprite_layer]
    SEI
    JSL   Aoba::Sprite.map_sprite_list.add_long
    CLI
  end



  datablock generator_routine_list
    dw   generate_fan
    dw   generate_fire_tower
  end



  def generate_sprites_from_map
    CPU.with_bank Aoba::FIXED_RAM_BANK, from_bank: Aoba::VARIABLE_RAM_BANK do
      LDX   #AssetConfig::Ingame.tilemap_storage.tiles[:top]
      generate_sprites_from_map_layer
      LDX   #AssetConfig::Ingame.tilemap_storage.tiles[:bottom]
      generate_sprites_from_map_layer
    end
  end

  def generate_sprites_from_map_layer
    A.pretend_size 8
    STX   dp(current_layer)

    LDA   AssetConfig::Ingame.tilemap_storage.height
    STA   dp(remaining_height)
    STZ   dp(current_y)

  _loop_y:
    TDC
    XBA

    STX   dp(current_row)
    STZ   dp(current_x)
    LDA   AssetConfig::Ingame.tilemap_storage.width
    STA   dp(remaining_width)

  _loop_x:
    LDA   0, X
    TAY
    LDA   AssetConfig::Ingame.tile_properties, Y
    BPL   _no_npc
    ASL   A
    BMI   _no_npc
    ASL   A
    BPL   _no_npc
    AND   #$7C
    LSR   A
    STX   dp(current_tile_address)
    TAX
    CPU.set A: 16
    CPU.with_bank Aoba::VARIABLE_RAM_BANK, from_bank: Aoba::FIXED_RAM_BANK do
      JSR   generator_routine_list.indirect, X
    end
    CPU.set A: 8
    TDC
    XBA
    LDX   dp(current_tile_address)

  _no_npc:
    INX
    INC   dp(current_x)
    DEC   dp(remaining_width)
    BNZ   _loop_x

    DEC   dp(remaining_height)
    BZE   _rts

    INC   dp(current_y)
    CPU.set A: 16
    LDA   dp(current_row)
    CLC
    ADC   #AssetConfig::Ingame.tilemap_format.max_width
    TAX
    CPU.set A: 8
    BRA   _loop_y

  _rts:
    RTS
  end

  class Parameter < Aoba::Level::Loader::Parameter
    macro size_in_bytes
      return 0
    end

    macro preconfigure
      @loader.SharedTempRAM.include TempRAM

      @loader.event.on "load8" do
        generate_sprites_from_map
        LDX   dp(@loader._current_level)
      end
    end
  end

end